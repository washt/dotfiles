{
  "_args": [
    [
      {
        "raw": "plumb@0.1.0",
        "scope": null,
        "escapedName": "plumb",
        "name": "plumb",
        "rawSpec": "0.1.0",
        "spec": "0.1.0",
        "type": "version"
      },
      "C:\\Users\\Fred\\Documents\\code\\vscode\\vscode-solargraph\\node_modules\\html2plaintext"
    ]
  ],
  "_from": "plumb@0.1.0",
  "_id": "plumb@0.1.0",
  "_inCache": true,
  "_location": "/plumb",
  "_npmUser": {
    "name": "jden",
    "email": "jason@denizac.org"
  },
  "_npmVersion": "1.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "plumb@0.1.0",
    "scope": null,
    "escapedName": "plumb",
    "name": "plumb",
    "rawSpec": "0.1.0",
    "spec": "0.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/html2plaintext"
  ],
  "_resolved": "https://registry.npmjs.org/plumb/-/plumb-0.1.0.tgz",
  "_shasum": "4c57790a509692832fdbf10dfaddd7948c5cb574",
  "_shrinkwrap": null,
  "_spec": "plumb@0.1.0",
  "_where": "C:\\Users\\Fred\\Documents\\code\\vscode\\vscode-solargraph\\node_modules\\html2plaintext",
  "author": {
    "name": "Agile Diagnosis",
    "email": "hello@agilediagnosis.com"
  },
  "bugs": {
    "url": "https://github.com/AgileDiagnosis/plumb/issues"
  },
  "dependencies": {},
  "description": "functional composition sugar",
  "devDependencies": {
    "chai": "~1.5.0",
    "mocha": "~1.9.0",
    "sinon": "~1.6.0",
    "sinon-chai": "~2.4.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "4c57790a509692832fdbf10dfaddd7948c5cb574",
    "tarball": "https://registry.npmjs.org/plumb/-/plumb-0.1.0.tgz"
  },
  "homepage": "https://github.com/AgileDiagnosis/plumb#readme",
  "keywords": [
    "functional",
    "compose",
    "composition"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jden",
      "email": "jason@denizac.org"
    }
  ],
  "name": "plumb",
  "optionalDependencies": {},
  "readme": "# plumb\nfunctional composition sugar\n\n## usage\n\n    var plumb = require('plumb')\n\n    var reverseString = plumb(\n      plumb.invoke('split')\n      plumb.invoke('reverse')\n      plumb.invoke('join','')\n    )\n    // => Function\n\n    reverseString('hello')\n    // => \"olleh\"\n\n## api\n\nUsing [jsig notation](https://github.com/jden/jsig)\n\n### `plumb(...fns: Function) => (val: Value) => Value`\n\nReutrns a function composing each of the argument functions in order. The return value of each function is used as the argument for each successive function.\n\n### `plumb.pipe(val: Value, ...fns: Function) => Value`\n\nImmediately invoke a composition of functions `fns` on the value `val`. It helps me to think about `fns` as a crazy pachinko machine and `val` as the ball going in.\n\nEquivalent to `plumb(fns)(val)`\n\n### `plumb.invoke(methodName: String, ...args?: Value) => Function`\n\nCreates a function which invokes a method on an object, optionally with fixed arguments.\n\nExample:\n\n    plumb.invoke('foo','bar')\n\nreturns the equivalent of\n\n    function callFoo(obj) {\n      return obj.foo('bar')\n    }\n\n### `plumb.tap(fn: Function) => (Value) => Value`\n\nCreate a function which passes a value through (identity) and calls a function `fn` with that value.\n\nExample:\n\n    var log = plumb.tap(function (x) { console.log(x)})\n\n    log(10)\n    // => 10\n    // side effect: console.log(10) was called\n\n## installation\n\n    $ npm install plumb\n\n## running the tests\n\nFrom project root:\n\n    $ npm install\n    $ npm test\n\n## contributors\n\njden <jason@denizac.org>\n\n## license\n\nMIT. (c) 2013 Agile Diagnosis <hello@agilediagnosis.com> See LICENSE.md\n\n\"...and visions of sugarplums danced in their heads\"",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/AgileDiagnosis/plumb.git"
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha"
  },
  "version": "0.1.0"
}
